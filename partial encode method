import java.util.*;
import java.io.*;

public class mainMethod {
	static final int COUNT = 10;
	static Scanner console = new Scanner(System.in);
	public static void main(String[] args) {
		//creates a file in the eclipse project src folder
			File myFile = new File("src/Morse_Code");
			
			TreeNode head = new TreeNode(' ');
			//puts each line inside of the text file into the project's methods
			//and prints their outputs in a user-friendly way
			BufferedReader reader;
			try {
				reader = new BufferedReader(new FileReader(myFile));
				String lineStr = reader.readLine();
				while (lineStr != null) {
					treeBuilder(lineStr, head);
					lineStr = reader.readLine();
				}
				reader.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
			print2D(head);
			
			String option = "f";
			while (option.charAt(0) != 'q') {
				System.out.println("MENU");
				System.out.println("e - Encode message");
				System.out.println("d - Decode message");
		        System.out.println("q - Quit");
		        System.out.println("");
		        System.out.println("Choose an option: ");
				option = console.next();
				
				//e
				if (option.charAt(0) == 'e') {
					System.out.println("Enter message to encode: ");
					String toEncode = console.next();
					StringBuilder encodedStr = new StringBuilder();
					for (int i = 0; i < toEncode.length(); i++) {
						encodedStr.append(encode(toEncode.charAt(i), "", head) + " ");
						
					}
					System.out.println(encodedStr.toString());
				}
				//d
				if (option.charAt(0) == 'd') {
					System.out.println("Enter message to decode: ");
					String fullStrtoDecode = console.next();
					StringBuilder strToDecode = new StringBuilder();
					for (int i = 0; i < fullStrtoDecode.length(); i++) {
						if (fullStrtoDecode.charAt(i) != ' ') {
							strToDecode.append(fullStrtoDecode.charAt(i));
						}
						else {
							decode(strToDecode.toString(), 0, head);
						}
					}
					
				}
				
				System.out.println();
			}//end while loop
			
			System.out.println("Have a nice day, PROGRAM TERMINATED");			
	}//end main

	public static String encode(char letter, String encodedStr, TreeNode root) {
		
		if (root.val == letter) {
			return encodedStr += "1";
		}
		String leftStr = encode(letter, encodedStr += ".", root.left);
		String rightStr = encode(letter, encodedStr += "-",  root.right);
		if (leftStr.charAt(encodedStr.length()-1) == '1') {
			
		}
		if (rightStr.charAt(encodedStr.length()-1) == '1') {
			
		}
		
	}
	
	public static char decode(String toDecode, int pos, TreeNode root) {
		
			
	}

	
	//Wrapper method
	public static void treeBuilder(String line, TreeNode head) {
		treeBuilder(line, 0, head);
	}//end treeBuilder
	 
	public static TreeNode treeBuilder(String line, int pos, TreeNode root) {	
		pos++;
		boolean finished = false;
		if (pos == line.length()) {
			finished = true;
			if (root == null) {
				TreeNode newNode = new TreeNode(line.charAt(0));
				root = newNode;
			}
			else {
				root.val = line.charAt(0);
			}
			
		}
		if (finished == false) {
			if (line.charAt(pos) == '.') {
				if (root == null) {
					TreeNode newNode = new TreeNode('0');
					root = newNode;
					root.left = treeBuilder(line, pos, root.left);
				}
				else {
					root.left = treeBuilder(line, pos, root.left);
				}
			}//end if
			
			if (line.charAt(pos) == '-') {
				if (root == null) {
					TreeNode newNode = new TreeNode('0');
					root = newNode;
					root.right = treeBuilder(line, pos, root.right);
				}
				else {
					root.right = treeBuilder(line, pos, root.right);
				}
			}//end if
		}
		return root;
	}//end treeBuilder
	
	
	static void print2DUtil(TreeNode root, int space)
	{
	    // Base case
	    if (root == null)
	        return;
	 
	    // Increase distance between levels
	    space += COUNT;
	 
	    // Process right child first
	    print2DUtil(root.right, space);
	 
	    // Print current node after space
	    // count
	    System.out.print("\n");
	    for (int i = COUNT; i < space; i++)
	        System.out.print(" ");
	    System.out.print(root.val + "\n");
	 
	    // Process left child
	    print2DUtil(root.left, space);
	}
	 
	// Wrapper over print2DUtil()
	static void print2D(TreeNode root)
	{
	    // Pass initial space count as 0
	    print2DUtil(root, 0);
	}
	
	
	
}//end class
